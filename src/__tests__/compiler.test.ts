import { compile } from '../compiler';
import fs from 'fs-extra';
import path from 'path';

// Create a path for a temporary directory for our tests
const TEST_DIR = path.join(__dirname, 'test-assets');
const DUMMY_PROMPT_CONTENT = 'You are a helpful assistant.';

describe('prompt-scribe compiler', () => {
    // Before each test, create a clean directory
    beforeEach(async () => {
        await fs.ensureDir(TEST_DIR);
    });

    // After each test, remove the temporary directory and its contents
    afterEach(async () => {
        await fs.remove(TEST_DIR);
    });

    it('should compile a .md file to a .md.ts file in the correct location', async () => {
        // Arrange: Create a dummy markdown file
        const promptsDir = path.join(TEST_DIR, 'prompts');
        await fs.ensureDir(promptsDir);
        const mdPath = path.join(promptsDir, 'test-prompt.md');
        await fs.writeFile(mdPath, DUMMY_PROMPT_CONTENT);

        // Act: Run the compiler on our test directory
        await compile(path.join(TEST_DIR, '**/*.md'));

        // Assert: Check that the compiled file exists
        const tsPath = mdPath + '.ts';
        const tsFileExists = await fs.pathExists(tsPath);
        expect(tsFileExists).toBe(true);
    });

    it('should generate a TypeScript file with the correct content', async () => {
        // Arrange
        const promptsDir = path.join(TEST_DIR, 'prompts');
        await fs.ensureDir(promptsDir);
        const mdPath = path.join(promptsDir, 'test-prompt.md');
        await fs.writeFile(mdPath, DUMMY_PROMPT_CONTENT);

        // Act
        await compile(path.join(TEST_DIR, '**/*.md'));

        // Assert
        const tsPath = mdPath + '.ts';
        const tsContent = await fs.readFile(tsPath, 'utf8');

        expect(tsContent).toContain(
            '// This file is auto-generated by prompt-scribe. Do not edit manually.'
        );
        expect(tsContent).toContain('export const prompt = `');
        expect(tsContent).toContain(DUMMY_PROMPT_CONTENT);
    });

    it('should not create any files when the glob pattern matches nothing', async () => {
        // Act: Run the compiler on a pattern that will find no files
        await compile(path.join(TEST_DIR, 'nonexistent/**/*.md'));

        // Assert: Check that our test directory is still empty
        const files = await fs.readdir(TEST_DIR);
        expect(files.length).toBe(0);
    });
});