import fs from 'fs-extra';
import { glob } from 'glob';
import chokidar from 'chokidar';

const template = (promptContent: string): string =>
    `// This file is auto-generated by prompt-scribe. Do not edit manually.\n` +
    `export default \`\n${promptContent.replace(/`/g, '\\`')}\n\`;\n`;

const transformPath = (mdPath: string): string => {
    return mdPath.replace(/\.md$/, '_md.ts');
};

async function compileFile(mdPath: string): Promise<void> {
    try {
        const tsPath = transformPath(mdPath);
        console.log(`Compiling: ${mdPath} -> ${tsPath}`);
        const mdContent = await fs.readFile(mdPath, 'utf8');
        const tsContent = template(mdContent);
        await fs.writeFile(tsPath, tsContent, 'utf8');
    } catch (error) {
        console.error(`Error compiling ${mdPath}:`, error);
    }
}

export async function compile(globPattern: string): Promise<void> {
    const files = await glob(globPattern, { ignore: 'node_modules/**' });
    if (files.length === 0) {
        console.warn(`No files found matching the pattern: ${globPattern}`);
        return;
    }
    await Promise.all(files.map(compileFile));
    console.log('Compilation complete.');
}

export function watch(globPattern: string): void {
    const watcher = chokidar.watch(globPattern, {
        persistent: true,
        ignoreInitial: true,
        ignored: 'node_modules/**',
    });

    watcher
        .on('add', (path) => compileFile(path))
        .on('change', (path) => compileFile(path))
        .on('unlink', (path) => {
            const tsPath = transformPath(path);
            console.log(`Deleting: ${tsPath}`);
            fs.remove(tsPath);
        });

    compile(globPattern);
}